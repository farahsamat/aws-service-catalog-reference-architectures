{"stages": [
{
  "type": "DelimitedExtract",
  "name": "extract initial table",
  "environments": ["dev", "test"],
  "inputURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/app-code/data/initial_contacts.csv",
  "outputView": "initial_raw",            
  "delimiter": "Comma",
  "header": false,
  "quote": "None",
  "authentication": {
     "method": "AmazonIAM"
  }
},
{
  "type": "TypingTransform",
  "name": "apply table schema 0",
  "environments": ["dev", "test"],
  "schemaURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/app-code/meta/workshop_meta_0.json",
  "inputView": "initial_raw",            
  "outputView": "initial_typed",
  "authentication": {
     "method": "AmazonIAM"
  }
},
{
  "type": "SQLTransform",
  "name": "validation",
  "description": "fail the job if data transform is failed",
  "environments": [
    "dev",
    "test"
  ],
  "sql": "\nSELECT SUM(error) = 0 AS valid\n,TO_JSON(\nNAMED_STRUCT('count', COUNT(error), 'errors', SUM(error))\n) AS message\nFROM\n(\nSELECT CASE WHEN SIZE(_errors) > 0 THEN 1 ELSE 0 END AS error\nFROM ${inputView}\n) base",
  "outputView": "fail_fast",
  "persist": false,
  "sqlParams": {
    "inputView": "initial_typed"
  }
},
{
  "type": "SQLTransform",
  "name": "add calc field for SCD",
  "description": "",
  "environments": [
    "dev",
    "test"
  ],
  "sql": "\nSELECT id,name,email,state, ${CURRENT_TIMESTAMP} AS valid_from, CAST(null AS timestamp) AS valid_to\n,1 AS iscurrent, md5(concat(name,email,state)) AS checksum\nFROM ${table_name}",
  "outputView": "initial_load",
  "persist": false,
  "sqlParams": {
    "table_name": "initial_typed",
    "CURRENT_TIMESTAMP": "${ETL_CONF_CURRENT_TIMESTAMP}"
  }
},
{
  "type": "DeltaLakeLoad",
  "name": "Initial load to Data Lake",
  "environments": ["dev", "test"],
  "inputView": "initial_load",
  "outputURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/output/delta_contact/",
  "numPartitions": 2
  "saveMode": "Overwrite",
  "authentication": {
     "method": "AmazonIAM"
  }
},
{
  "type": "DelimitedExtract",
  "name": "extract incremental data",
  "environments": ["dev", "test"],
  "inputURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/app-code/data/update_contacts.csv",
  "outputView": "delta_raw",            
  "delimiter": "Comma",
  "header": false,
  "authentication": {
     "method": "AmazonIAM"
  }
},
{
  "type": "TypingTransform",
  "name": "apply table schema 0 to incremental load",
  "environments": ["dev", "test"],
  "schemaURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/app-code/meta/workshop_meta_0.json",
  "inputView": "delta_raw",            
  "outputView": "delta_typed",
  "authentication": {
     "method": "AmazonIAM"
  }
},
{
  "type": "SQLTransform",
  "name": "validation",
  "description": "fail the job if data transform is failed",
  "environments": [
    "dev",
    "test"
  ],
  "sql": "\nSELECT SUM(error) = 0 AS valid\n,TO_JSON(\nNAMED_STRUCT('count', COUNT(error), 'errors', SUM(error))\n) AS message\nFROM\n(\nSELECT CASE WHEN SIZE(_errors) > 0 THEN 1 ELSE 0 END AS error\nFROM ${inputView}\n) base",
  "outputView": "fail_fast",
  "persist": false,
  "sqlParams": {
    "inputView": "delta_typed"
  }
},
{
  "type": "SQLTransform",
  "name": "add calc field for SCD",
  "description": "",
  "environments": [
    "dev",
    "test"
  ],
  "sql": "\nSELECT id,name,email,state, ${CURRENT_TIMESTAMP} AS valid_from, CAST(null AS timestamp) AS valid_to\n,1 AS iscurrent, md5(concat(name,email,state)) AS checksum\nFROM ${table_name}",
  "outputView": "update_load",
  "persist": false,
  "sqlParams": {
    "table_name": "delta_typed",
    "CURRENT_TIMESTAMP": "${ETL_CONF_CURRENT_TIMESTAMP}"
  }
},
{
  "type": "SQLTransform",
  "name": "generate extra rows for SCD",
  "description": "",
  "environments": [
    "dev",
    "test"
  ],
  "sql": "\nSELECT NULL AS mergeKey, new.*\nFROM initial_load old\nINNER JOIN update_load new\nON old.id = new.id\nWHERE old.iscurrent=true\nAND old.checksum<>new.checksum\n\nUNION\n\nSELECT id AS mergeKey, *\nFROM update_load",
  "outputView": "staged_update",
  "persist": false,
  "sqlParams": {}
},
{
  "type": "DeltaLakeMergeLoad",
  "name": "merge with existing contacts data",
  "environments": [
    "dev",
    "test"
  ],
  "inputView": "staged_update",
  "outputURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/output/delta_contact/"
  "condition": "source.mergeKey = target.id",
  "whenMatchedUpdate": {
    "condition": "target.iscurrent = true AND source.checksum <> target.checksum",
    "values": {
      "valid_to": ${ETL_CONF_CURRENT_TIMESTAMP},
      "iscurrent": false
    }
  },
  "whenNotMatchedByTargetInsert": {}
},
{
  "type": "DeltaLakeExtract",
  "name": "read contact Delta Lake table",
  "description": "read contact table",
  "environments": [
    "uat"
  ],
  "inputURI": "s3a://"${ETL_CONF_DATALAKE_LOC}"/output/delta_contact/",
  "outputView": "contact"
},
{
  "type": "SQLTransform",
  "name": "expired_count",
  "description": "",
  "environments": [
    "uat"
  ],
  "sql": "SELECT count(*) FROM contact WHERE valid_to is not null",
  "outputView": "expired_count",
  "persist": false,
  "sqlParams": {}
},
{
  "type": "SQLTransform",
  "name": "total_count",
  "description": "",
  "environments": [
    "uat"
  ],
  "sql": "SELECT count(*) FROM contact",
  "outputView": "total_count",
  "persist": false,
  "sqlParams": {}
},
{
  "type": "SQLTransform",
  "name": "validate_type2",
  "description": "",
  "environments": [
    "uat"
  ],
  "sql": "SELECT * FROM contact WHERE id=12",
  "outputView": "validate_type2",
  "persist": false,
  "sqlParams": {}
}
]}